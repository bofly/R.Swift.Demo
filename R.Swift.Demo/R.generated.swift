// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generated, and contains references to static resources.
struct R {
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    private init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 12 files.
  struct file {
    /// Resource file `topic_ic_emoji@2x.png`.
    static let topic_ic_emoji2xPng = FileResource(bundle: _R.hostingBundle, name: "topic_ic_emoji@2x", pathExtension: "png")
    /// Resource file `topic_ic_emoji@3x.png`.
    static let topic_ic_emoji3xPng = FileResource(bundle: _R.hostingBundle, name: "topic_ic_emoji@3x", pathExtension: "png")
    /// Resource file `topic_ic_emoji_a@2x.png`.
    static let topic_ic_emoji_a2xPng = FileResource(bundle: _R.hostingBundle, name: "topic_ic_emoji_a@2x", pathExtension: "png")
    /// Resource file `topic_ic_emoji_a@3x.png`.
    static let topic_ic_emoji_a3xPng = FileResource(bundle: _R.hostingBundle, name: "topic_ic_emoji_a@3x", pathExtension: "png")
    /// Resource file `topic_ic_emoji_act@2x.png`.
    static let topic_ic_emoji_act2xPng = FileResource(bundle: _R.hostingBundle, name: "topic_ic_emoji_act@2x", pathExtension: "png")
    /// Resource file `topic_ic_emoji_act@3x.png`.
    static let topic_ic_emoji_act3xPng = FileResource(bundle: _R.hostingBundle, name: "topic_ic_emoji_act@3x", pathExtension: "png")
    /// Resource file `topic_ic_shut@2x.png`.
    static let topic_ic_shut2xPng = FileResource(bundle: _R.hostingBundle, name: "topic_ic_shut@2x", pathExtension: "png")
    /// Resource file `topic_ic_shut@3x.png`.
    static let topic_ic_shut3xPng = FileResource(bundle: _R.hostingBundle, name: "topic_ic_shut@3x", pathExtension: "png")
    /// Resource file `topic_ic_shut_press@2x.png`.
    static let topic_ic_shut_press2xPng = FileResource(bundle: _R.hostingBundle, name: "topic_ic_shut_press@2x", pathExtension: "png")
    /// Resource file `topic_ic_shut_press@3x.png`.
    static let topic_ic_shut_press3xPng = FileResource(bundle: _R.hostingBundle, name: "topic_ic_shut_press@3x", pathExtension: "png")
    /// Resource file `topic_ic_yan@2x.png`.
    static let topic_ic_yan2xPng = FileResource(bundle: _R.hostingBundle, name: "topic_ic_yan@2x", pathExtension: "png")
    /// Resource file `topic_ic_yan@3x.png`.
    static let topic_ic_yan3xPng = FileResource(bundle: _R.hostingBundle, name: "topic_ic_yan@3x", pathExtension: "png")
    
    /// `bundle.URLForResource("topic_ic_emoji@2x", withExtension: "png")`
    static func topic_ic_emoji2xPng(_: Void) -> NSURL? {
      let fileResource = R.file.topic_ic_emoji2xPng
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("topic_ic_emoji@3x", withExtension: "png")`
    static func topic_ic_emoji3xPng(_: Void) -> NSURL? {
      let fileResource = R.file.topic_ic_emoji3xPng
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("topic_ic_emoji_a@2x", withExtension: "png")`
    static func topic_ic_emoji_a2xPng(_: Void) -> NSURL? {
      let fileResource = R.file.topic_ic_emoji_a2xPng
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("topic_ic_emoji_a@3x", withExtension: "png")`
    static func topic_ic_emoji_a3xPng(_: Void) -> NSURL? {
      let fileResource = R.file.topic_ic_emoji_a3xPng
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("topic_ic_emoji_act@2x", withExtension: "png")`
    static func topic_ic_emoji_act2xPng(_: Void) -> NSURL? {
      let fileResource = R.file.topic_ic_emoji_act2xPng
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("topic_ic_emoji_act@3x", withExtension: "png")`
    static func topic_ic_emoji_act3xPng(_: Void) -> NSURL? {
      let fileResource = R.file.topic_ic_emoji_act3xPng
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("topic_ic_shut@2x", withExtension: "png")`
    static func topic_ic_shut2xPng(_: Void) -> NSURL? {
      let fileResource = R.file.topic_ic_shut2xPng
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("topic_ic_shut@3x", withExtension: "png")`
    static func topic_ic_shut3xPng(_: Void) -> NSURL? {
      let fileResource = R.file.topic_ic_shut3xPng
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("topic_ic_shut_press@2x", withExtension: "png")`
    static func topic_ic_shut_press2xPng(_: Void) -> NSURL? {
      let fileResource = R.file.topic_ic_shut_press2xPng
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("topic_ic_shut_press@3x", withExtension: "png")`
    static func topic_ic_shut_press3xPng(_: Void) -> NSURL? {
      let fileResource = R.file.topic_ic_shut_press3xPng
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("topic_ic_yan@2x", withExtension: "png")`
    static func topic_ic_yan2xPng(_: Void) -> NSURL? {
      let fileResource = R.file.topic_ic_yan2xPng
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    /// `bundle.URLForResource("topic_ic_yan@3x", withExtension: "png")`
    static func topic_ic_yan3xPng(_: Void) -> NSURL? {
      let fileResource = R.file.topic_ic_yan3xPng
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    private init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    private init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 6 images.
  struct image {
    /// Image `topic_ic_emoji`.
    static let topic_ic_emoji = ImageResource(bundle: _R.hostingBundle, name: "topic_ic_emoji")
    /// Image `topic_ic_emoji_a`.
    static let topic_ic_emoji_a = ImageResource(bundle: _R.hostingBundle, name: "topic_ic_emoji_a")
    /// Image `topic_ic_emoji_act`.
    static let topic_ic_emoji_act = ImageResource(bundle: _R.hostingBundle, name: "topic_ic_emoji_act")
    /// Image `topic_ic_shut`.
    static let topic_ic_shut = ImageResource(bundle: _R.hostingBundle, name: "topic_ic_shut")
    /// Image `topic_ic_shut_press`.
    static let topic_ic_shut_press = ImageResource(bundle: _R.hostingBundle, name: "topic_ic_shut_press")
    /// Image `topic_ic_yan`.
    static let topic_ic_yan = ImageResource(bundle: _R.hostingBundle, name: "topic_ic_yan")
    
    /// `UIImage(named: "topic_ic_emoji", bundle: ..., traitCollection: ...)`
    static func topic_ic_emoji(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.topic_ic_emoji, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "topic_ic_emoji_a", bundle: ..., traitCollection: ...)`
    static func topic_ic_emoji_a(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.topic_ic_emoji_a, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "topic_ic_emoji_act", bundle: ..., traitCollection: ...)`
    static func topic_ic_emoji_act(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.topic_ic_emoji_act, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "topic_ic_shut", bundle: ..., traitCollection: ...)`
    static func topic_ic_shut(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.topic_ic_shut, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "topic_ic_shut_press", bundle: ..., traitCollection: ...)`
    static func topic_ic_shut_press(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.topic_ic_shut_press, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "topic_ic_yan", bundle: ..., traitCollection: ...)`
    static func topic_ic_yan(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.topic_ic_yan, compatibleWithTraitCollection: traitCollection)
    }
    
    private init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    private init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    private init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    private init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void) -> UIStoryboard {
      return UIStoryboard(resource: R.storyboard.main)
    }
    
    private init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    private init() {}
  }
  
  private init() {}
}

struct _R {
  static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(NSLocale.init) ?? NSLocale.currentLocale()
  static let hostingBundle = NSBundle(identifier: "com.bob.R-Swift-Demo") ?? NSBundle.mainBundle()
  
  struct nib {
    private init() {}
  }
  
  struct storyboard {
    struct launchScreen: StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIViewController
      
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      private init() {}
    }
    
    struct main: StoryboardResourceWithInitialControllerType {
      typealias InitialController = ViewController
      
      let bundle = _R.hostingBundle
      let name = "Main"
      
      private init() {}
    }
    
    private init() {}
  }
  
  private init() {}
}